name: 'Terraform Configuration Drift Detection'

on:
  workflow_dispatch: 
  schedule:
    - cron: '*/5 * * * *' # runs nightly at 3:41 am

env:

  TF_CLOUD_ORGANIZATION: ${{ secrets.TF_CLOUD_ORGANIZATION }}     

  TF_VAR_AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  TF_VAR_AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TF_VAR_AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

  terraform_version: "1.2.5"
  working_directory: terraform
  target_environment: dev

jobs:
  terraform-plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    environment: dev
    outputs:
      tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Find github project name
        run:  echo "project_name=$(basename `git rev-parse --show-toplevel`)" >> $GITHUB_ENV

      - name: Set Terraform Workspace
        run: |
          echo "Setting ***   ${{ env.project_name }}-${{ env.target_environment }}   *** as the Terraform Workspace"
          echo "TF_WORKSPACE=${{ env.project_name }}-${{ env.target_environment }}" >> $GITHUB_ENV      

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "${{ env.terraform_version }}"
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        id: init
        run: terraform init -input=false              
        working-directory: "${{ env.working_directory }}"

      - name: Terraform Plan
        id: tf-plan
        run: |
            export exitcode=0
            terraform plan -detailed-exitcode -no-color -out tfplan -var-file ./environments/${{ env.target_environment }}.tfvars || export exitcode=$?
        working-directory: "${{ env.working_directory }}"
          
      # Save plan to artifacts  
      - name: Publish Terraform Plan
        uses: actions/upload-artifact@v3
        with:
          name: tfplan
          path: tfplan

      # Create string output of Terraform Plan
      - name: Create String Output
        id: tf-plan-string
        run: |
          TERRAFORM_PLAN=$(terraform show -no-color tfplan)
          
          delimiter="$(openssl rand -hex 8)"
          echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
          echo "## Terraform Plan Output" >> $GITHUB_OUTPUT
          echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo '```terraform' >> $GITHUB_OUTPUT
          echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
          echo '```' >> $GITHUB_OUTPUT
          echo "</details>" >> $GITHUB_OUTPUT
          echo "${delimiter}" >> $GITHUB_OUTPUT
        working-directory: "${{ env.working_directory }}"

      # Publish Terraform Plan as task summary
      - name: Publish Terraform Plan to Task Summary
        env:
          SUMMARY: ${{ steps.tf-plan-string.outputs.summary }}
        run: |
          echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY
        working-directory: "${{ env.working_directory }}"

      - name: Publish Drift Report
        if: steps.tf-plan.outputs.exitcode == 2
        uses: actions/github-script@v6
        env:
          SUMMARY: "${{ steps.tf-plan-string.outputs.summary }}"
        with:
            github-token: ${{ secrets.GITHUB_TOKEN }}
            script: |
              const body = `${process.env.SUMMARY}`;
              const title = 'Terraform Configuration Drift Detected';
              const creator = 'github-actions[bot]'
            
              // Look to see if there is an existing drift issue
              const issues = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                creator: creator,
                title: title
              })
                
              if( issues.data.length > 0 ) {
                // We assume there shouldn't be more than 1 open issue, since we update any issue we find
                const issue = issues.data[0]
                
                if ( issue.body == body ) {
                  console.log('Drift Detected: Found matching issue with duplicate content')
                } else {
                  console.log('Drift Detected: Found matching issue, updating body')
                  github.rest.issues.update({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issue.number,
                    body: body
                  })
                }
              } else {
                console.log('Drift Detected: Creating new issue')
                github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: title,
                  body: body
              })
              }
                
        # If changes aren't detected, close any open drift issues
      - name: Publish Drift Report
        if: steps.tf-plan.outputs.exitcode == 0
        uses: actions/github-script@v6
        with:
            github-token: ${{ secrets.GITHUB_TOKEN }}
            script: |
              const title = 'Terraform Configuration Drift Detected';
              const creator = 'github-actions[bot]'
            
              // Look to see if there is an existing drift issue
              const issues = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                creator: creator,
                title: title
              })
                
              if( issues.data.length > 0 ) {
                const issue = issues.data[0]
                
                github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  state: 'closed'
                })
              } 
                  
      # Mark the workflow as failed if drift detected 
      - name: Error on Failure
        if: steps.tf-plan.outputs.exitcode == 2
        run: exit 1